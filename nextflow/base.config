
process {

    //This changes the requirements for specific processes

    withName : ".*UNTAR.*" {
        cpus   = { 1 }
        memory = { 100.MB }
        time   = { 3.h   * task.attempt }
    }
    withName : ".*DOWNSAMPLEFASTQ.*" {
        cpus   = { 1 }
        memory = { 1.GB }
        time   = { 1.h   * task.attempt }
    }
    withName : ".*:KRONA" {
        cpus   = { 1 }
        memory = { 5.GB }
        time   = { 1.h   * task.attempt }
    }    
    withName : ".*:RSEQC_READDUPLICATION" {
        cpus   = { 1 }
        memory = { 6.GB * task.attempt }
        time   = { 3.h   * task.attempt }
    }    
    withName : ".*KRAKEN2.*" {
        cpus   = { 12 }
        memory = { 72.GB }
        time   = { 30.m   * task.attempt }
    }    
    withName : ".*:BAM_STATS_SAMTOOLS:.*" {
        cpus   = { 2 }
        memory = { 500.MB * task.attempt }
        time   = { 3.h   * task.attempt }
    }
    withName : ".*:SAMTOOLS_INDEX" {
        cpus   = { 8 }
        memory = { 600.MB * task.attempt }
        time   = { 3.h   * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN" {
        cpus   = { 24 }
        memory = { 38.GB }
        time   = { 150.h * task.attempt}
    }
    withName : ".*:SAMTOOLS_SORT" {
        // samtools sort is set to use a maximum of 4G of memory per thread, as hard-coded in NF-CORE:SAMTOOLS:SORT
        cpus   = { 8 }
        memory = { 20.GB * task.attempt}
        time   = { 30.m * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:BEDGRAPH_TO_BIGWIG_.*" {
        cpus   = { 1 }
        memory = { 200.MB * task.attempt }
        time   = { 3.h   * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:BEDTOOLS_GENOMECOV" {
        cpus   = { 2 }
        memory = { 10.GB * task.attempt }
        time   = { 4.h   * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:CUSTOM_DUMPSOFTWAREVERSIONS" {
        cpus   = { 1 }
        memory = { 1.GB }
        time   = { 1.h * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:DEDUP_UMI_UMITOOLS_GENOME:UMITOOLS_DEDUP"{
        cpus   = { 1 }
        memory = { 10.GB  * task.attempt }
        time   = { 20.h   * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:DEDUP_UMI_UMITOOLS_TRANSCRIPTOME:UMITOOLS_DEDUP"{
        cpus   = { 1 }
        memory = { 10.GB  * task.attempt}
        time   = { 20.h * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:DESEQ2_QC_STAR_SALMON"{
        cpus   = { 2 }
        memory = { 3.GB * task.attempt }
        time   = { 3.h * task.attempt }
    }   
     withName : "NFCORE_RNASEQ:RNASEQ:DUPRADAR"{
        cpus   = { 2 }
        memory = { 1.GB * task.attempt }
        time   = { 3.h   * task.attempt }
    }   
     withName : "NFCORE_RNASEQ:RNASEQ:FASTQC_UMITOOLS_TRIMGALORE:FASTQC"{
        cpus   = { 3 }
        memory = { 1.GB * task.attempt }
        time   = { 5.h * task.attempt }
    }   
     withName : "NFCORE_RNASEQ:RNASEQ:FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE"{
        // 8 cpus translates to trim_galore arg "--cores 4", which is apparently the sweet spot.
        // See https://github.com/nf-core/atacseq/pull/65
        cpus   = { 8 }
        memory = { 4.GB }
        time   = { 8.h * task.attempt }
    } 
     withName : "NFCORE_RNASEQ:RNASEQ:FASTQC_UMITOOLS_TRIMGALORE:UMITOOLS_EXTRACT"{
        cpus   = { 1 }
        memory = { 800.MB * task.attempt }
        time   = { 10.h    * task.attempt }
    } 
     withName : "NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_JUNCTIONSATURATION"{
        cpus   = { 1 }
        memory = { 2.GB * task.attempt }
        time   = { 6.h    * task.attempt }
    }

     withName : "NFCORE_RNASEQ:RNASEQ:FLOMICS_QC:FLOMICS_QC_AGGREGATOR"{
        cpus   = { 1 }
        memory = { 200.MB * task.attempt }
        time   = { 1.h   * task.attempt }
    } 
     withName : "NFCORE_RNASEQ:RNASEQ:FLOMICS_QC:FLOMICS_QC_CALCULATE_.*"{
        cpus   = { 1 }
        memory = { 1.GB * task.attempt }
        time   = { 3.h * task.attempt }
    } 
     withName : "NFCORE_RNASEQ:RNASEQ:FLOMICS_QC:FLOMICS_QC_PARSER"{
        cpus   = { 1 }
        memory = { 200.MB * task.attempt }
        time   = { 1.h   * task.attempt }
    }

     withName : "NFCORE_RNASEQ:RNASEQ:FLOMICS_QC:FLOMICS_QC_SPLICED_READS"{
        cpus   = { 1 }
        memory = { 6.GB * task.attempt }
        time   = { 6.h  * task.attempt }
    } 
     withName : "NFCORE_RNASEQ:RNASEQ:FLOMICS_QC:FLOMICS_TRACKHUBS"{
        cpus   = { 1 }
        memory = { 400.MB * task.attempt }
        time   = { 1.h   * task.attempt }
    } 
     withName : "NFCORE_RNASEQ:RNASEQ:FLOMICS_UMI_DEDUP_QC:FLOMICS_QC_CALCULATE_UMI_DEDUP_RATE"{
        cpus   = { 1 }
        memory = { 1.GB * task.attempt }
        time   = { 8.h   * task.attempt }
    } 
    withName : "NFCORE_RNASEQ:RNASEQ:INPUT_CHECK:SAMPLESHEET_CHECK"{
        cpus   = { 1 }
        memory = { 100.MB * task.attempt }
        time   = { 30.m   * task.attempt }
    } 
    withName : "NFCORE_RNASEQ:RNASEQ:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES"{
        cpus   = { 1 }
        memory = { 10.GB * task.attempt }
        time   = { 1.h  * task.attempt }
    } 
    withName : "NFCORE_RNASEQ:RNASEQ:MULTIQC"{
        cpus   = { 1 }
        memory = { 4.GB * task.attempt }
        time   = { 60.m * task.attempt }
    } 
    withName : "NFCORE_RNASEQ:RNASEQ:MULTIQC_CUSTOM_BIOTYPE"{
        cpus   = { 1 }
        memory = { 300.MB * task.attempt }
        time   = { 1.h   * task.attempt }
    } 
    withName : "NFCORE_RNASEQ:RNASEQ:MULTIQC_TSV_STRAND_CHECK"{
        cpus   = { 1 }
        memory = { 100.MB * task.attempt }
        time   = { 1.h   * task.attempt }
    } 
    withName : "NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:CUSTOM_GETCHROMSIZES"{
        cpus   = { 1 }
        memory = { 200.MB * task.attempt }
        time   = { 1.h   * task.attempt }
    } 
     withName : "NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:GTF2BED" {
        cpus   = { 1 }
        memory = { 4.GB * task.attempt }
        time   = { 1.h * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:GTF_GENE_FILTER" {
        cpus   = { 1 }
        memory = { 3.GB * task.attempt }
        time   = { 1.h * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:PREPARE_GENOME:MAKE_TRANSCRIPTS_FASTA" {
        cpus   = { 1 }
        memory = { 3.GB * task.attempt }
        time   = { 1.h * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:QUALIMAP_RNASEQ" {
        cpus   = { 1 }
        memory = { 6.GB * task.attempt }
        time   = { 8.h  * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:QUANTIFY_.*:SALMON_QUANT" {
        cpus   = { 1 }
        memory = { 3.GB * task.attempt }
        time   = { 3.h * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:QUANTIFY_.*:SALMON_SE_.*" {
        cpus   = { 1 }
        memory = { 1.GB * task.attempt }
        time   = { 3.h * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:QUANTIFY_.*:SALMON_TX2GENE" {
        cpus   = { 1 }
        memory = { 10.GB * task.attempt }
        time   = { 1.h  * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:QUANTIFY_.*:SALMON_TXIMPORT" {
        cpus   = { 1 }
        memory = { 1.GB * task.attempt }
        time   = { 1.h * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_BAMSTAT" {
        cpus   = { 1 }
        memory = { 500.MB * task.attempt }
        time   = { 3.h   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_INFEREXPERIMENT" {
        cpus   = { 1 }
        memory = { 400.MB * task.attempt }
        time   = { 4.h   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_INNERDISTANCE" {
        cpus   = { 1 }
        memory = { 1.GB * task.attempt }
        time   = { 3.h * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_JUNCTIONANNOTATION" {
        cpus   = { 1 }
        memory = { 400.MB * task.attempt }
        time   = { 3.h   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:RSEQC:RSEQC_READDISTRIBUTION" {
        cpus   = { 1 }
        memory = { 1200.MB * task.attempt }
        time   = { 3.h    * task.attempt }
    }

    withName : "NFCORE_RNASEQ:RNASEQ:STRINGTIE_STRINGTIE" {
        cpus   = { 1 }
        memory = { 1.GB * task.attempt }
        time   = { 2.h * task.attempt }
    }  
    withName : "NFCORE_RNASEQ:RNASEQ:SUBREAD_FEATURECOUNTS" {
        cpus   = { 1 }
        memory = { 1.GB * task.attempt }
        time   = { 3.h   * task.attempt }
    }    
    withName : ".*:UMITOOLS_PREPAREFORRSEM" {
        cpus   = { 1 }
        memory = { 500.MB * task.attempt }
        time   = { 4.h   * task.attempt }
    }
     withName : "NFCORE_RNASEQ:RNASEQ:BIOTYPE_DISTRIBUTION" {
        cpus   = { 1 }
        memory = { 2.GB * task.attempt }
        time   = { 3.h   * task.attempt }
    }
    withName : "NFCORE_RNASEQ:RNASEQ:BEDTOOLS_GENOMIC_ORIGIN_OF_READS" {
        cpus   = { 1 }
        memory = { 2.GB * task.attempt }
        time   = { 6.h   * task.attempt }
    }

    //This next section adds necessary parameters to the processes

    withName: "NFCORE_RNASEQ:RNASEQ:ALIGN_STAR:STAR_ALIGN" {
        ext.args   =  '--readFilesCommand zcat --twopassMode None --outSAMprimaryFlag OneBestScore --outFilterMismatchNmax 999 --outFilterMismatchNoverReadLmax 0.04 --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 --outFilterType BySJout --alignSJDBoverhangMin 3 --alignSJoverhangMin 8 --peOverlapNbasesMin 40 --peOverlapMMp 0.8 --quantMode TranscriptomeSAM --quantTranscriptomeBan Singleend --outSAMattributes All'
		//--twopassMode Basic
		//     It reduces the number of intergenic reads and increases the number of spliced reads in cfRNA without increasing the spliced reads in DNA.

		//--outSAMprimaryFlag OneBestScore
		//     Guarantees that STAR outputs one and only one primary alignment per read pair (aka fragment). See STAR manual for details.
		//     In other words, ensures that the "samtools view -F256" command run on STAR's genome BAMs output no more than one alignment per read pair,
		//     which some downstream processes of Flomics/rnaseq rely upon.

        // --outFilterMismatchNoverReadLmax
        //    ENCODE recommends a value of 0.04:
        //    max number of mismatches per pair relative to read length: for 2x100b, max number of mis-matches is 0.04*200=8 for the paired read
        
        // --outFilterMismatchNmax 999
        //   A value of 999 ensures that no hard filter is applied on the *raw* number of mismatches in alignments. See also outFilterMismatchNoverReadLmax
                // --outFilterScoreMinOverLread 0.66 --outFilterMatchNminOverLread 0.66
                //     default values. When reduced, there is an increase in mapping, but it reduces heavily the quality of the mapped reads. In cfRNA from external sources
		//     the exonic percentage goes from 40-50% to 10-20% and the % of novel splicing junctions increase by 5-10%.

                // --outFilterMismatchNoverLmax 0.3
                //     Left at default. 0.6 is the recommended by Lexogen, but in our samples we see the exact same results.

                // --outSAMmultNmax -1
                //     limits the number of output alignments (SAM lines) for multimappers. Left at default since this does not change the output.

                // --outFilterMultimapNmax 20
                //     Alignments (all of them) will be output only if the read maps to no more loci than this value.
                //     Otherwise no alignments will be output, and the read will be counted as 'mapped to too many loci' in the Log.final.out.
		//     Tried increasing this to 1000 and reducing the --outSAMmultNmax to 10, but the results are the same as the default and we left the default (20).

                // --outFilterType BySJout
                //     Reduces the number of "spurious" junctions

                // --alignSJoverhangMin 8
                //     ENCODE-recommended setting

                // --alignSJDBoverhangMin 3
                //     Default, do not reduce to 1 (as recommended in ENCODE settings).
                //     A priori, a high value should reduce the number of false SJs improperly mapped to annotated splices.
                //     (We've seen that with genomic DNA being falsely spliced for this reason)

                // Lexogen support recommends --peOverlapNbasesMin 40  --peOverlapMMp 0.8: "sometimes when the inserts are short, the resulting overlapping Read1 and Read2 cause problems during the alignment. Though STAR is supposed to handle these cases with the standard settings, unfortunately it is not true (v2.5.1). So, we empirically found a set of values for those arguments that generate the desired alignments."

    }

    withName : "NFCORE_RNASEQ:RNASEQ:QUANTIFY_STAR_SALMON:SALMON_QUANT" {
            ext.args = '--useEM --noErrorModel --incompatPrior 0.0'
    }
    withName : "NFCORE_RNASEQ:RNASEQ:QUANTIFY_REV_STAR_SALMON:SALMON_QUANT" {
            ext.args = '--useEM --noErrorModel --incompatPrior 0.0'
    }
}
